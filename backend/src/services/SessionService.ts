import { createLogger } from '../utils/logger.js'
import { prisma } from '../lib/prisma.js'

const logger = createLogger('SessionService')

class SessionService {
  /**
   * Generate a new session (UUID generated by Prisma)
   */
  public async createSession() {
    const session = await prisma.session.create({
      data: {},
    })

    logger.info({ sessionId: session.id }, 'New session created')
    return session
  }

  /**
   * Validate session ID format (UUID v4)
   */
  public validateSessionId(sessionId: string): boolean {
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i
    return uuidRegex.test(sessionId)
  }

  /**
   * Get session by ID
   */
  public async getSession(sessionId: string) {
    if (!this.validateSessionId(sessionId)) {
      logger.warn({ sessionId }, 'Invalid session ID format')
      return null
    }

    const session = await prisma.session.findUnique({
      where: { id: sessionId },
    })

    if (!session) {
      logger.debug({ sessionId }, 'Session not found')
      return null
    }

    // Update last accessed time
    await prisma.session.update({
      where: { id: sessionId },
      data: { lastAccessedAt: new Date() },
    })

    return session
  }

  /**
   * Check if session exists
   */
  public async sessionExists(sessionId: string): Promise<boolean> {
    const session = await prisma.session.findUnique({
      where: { id: sessionId },
    })
    return !!session
  }

  /**
   * Cleanup old sessions (older than 24 hours of inactivity)
   */
  public async cleanupOldSessions(): Promise<number> {
    const cutoffTime = new Date()
    cutoffTime.setHours(cutoffTime.getHours() - 24)

    const result = await prisma.session.deleteMany({
      where: {
        lastAccessedAt: {
          lt: cutoffTime,
        },
      },
    })

    if (result.count > 0) {
      logger.info({ deletedCount: result.count }, 'Cleaned up old sessions')
    }

    return result.count
  }

  /**
   * Get total number of active sessions
   */
  public async getSessionCount(): Promise<number> {
    return await prisma.session.count()
  }
}

// Export singleton instance
export const sessionService = new SessionService()
